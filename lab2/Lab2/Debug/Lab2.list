
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002260  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800236c  0800236c  0001236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023a8  080023a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023a8  080023a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023a8  080023a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023a8  080023a8  000123a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023ac  080023ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  080023bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080023bc  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ca2  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016fe  00000000  00000000  00027d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  00029418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000075e  00000000  00000000  00029da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001636c  00000000  00000000  0002a506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ac6  00000000  00000000  00040872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082264  00000000  00000000  0004a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002734  00000000  00000000  000cc59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000cecd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002354 	.word	0x08002354

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002354 	.word	0x08002354

0800014c <display7SEG>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	  switch(num){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
			case 0:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b4      	ldr	r0, [pc, #720]	; (8000464 <display7SEG+0x318>)
 8000192:	f001 f8bb 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b2      	ldr	r0, [pc, #712]	; (8000464 <display7SEG+0x318>)
 800019c:	f001 f8b6 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48af      	ldr	r0, [pc, #700]	; (8000464 <display7SEG+0x318>)
 80001a6:	f001 f8b1 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ad      	ldr	r0, [pc, #692]	; (8000464 <display7SEG+0x318>)
 80001b0:	f001 f8ac 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48aa      	ldr	r0, [pc, #680]	; (8000464 <display7SEG+0x318>)
 80001ba:	f001 f8a7 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a8      	ldr	r0, [pc, #672]	; (8000464 <display7SEG+0x318>)
 80001c4:	f001 f8a2 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48a5      	ldr	r0, [pc, #660]	; (8000464 <display7SEG+0x318>)
 80001ce:	f001 f89d 	bl	800130c <HAL_GPIO_WritePin>
				  break;
 80001d2:	e143      	b.n	800045c <display7SEG+0x310>
			case 1:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a2      	ldr	r0, [pc, #648]	; (8000464 <display7SEG+0x318>)
 80001da:	f001 f897 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a0      	ldr	r0, [pc, #640]	; (8000464 <display7SEG+0x318>)
 80001e4:	f001 f892 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489d      	ldr	r0, [pc, #628]	; (8000464 <display7SEG+0x318>)
 80001ee:	f001 f88d 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489b      	ldr	r0, [pc, #620]	; (8000464 <display7SEG+0x318>)
 80001f8:	f001 f888 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4898      	ldr	r0, [pc, #608]	; (8000464 <display7SEG+0x318>)
 8000202:	f001 f883 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4896      	ldr	r0, [pc, #600]	; (8000464 <display7SEG+0x318>)
 800020c:	f001 f87e 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4893      	ldr	r0, [pc, #588]	; (8000464 <display7SEG+0x318>)
 8000216:	f001 f879 	bl	800130c <HAL_GPIO_WritePin>
				  break;
 800021a:	e11f      	b.n	800045c <display7SEG+0x310>
			case 2:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4890      	ldr	r0, [pc, #576]	; (8000464 <display7SEG+0x318>)
 8000222:	f001 f873 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488e      	ldr	r0, [pc, #568]	; (8000464 <display7SEG+0x318>)
 800022c:	f001 f86e 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488b      	ldr	r0, [pc, #556]	; (8000464 <display7SEG+0x318>)
 8000236:	f001 f869 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4889      	ldr	r0, [pc, #548]	; (8000464 <display7SEG+0x318>)
 8000240:	f001 f864 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4886      	ldr	r0, [pc, #536]	; (8000464 <display7SEG+0x318>)
 800024a:	f001 f85f 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4884      	ldr	r0, [pc, #528]	; (8000464 <display7SEG+0x318>)
 8000254:	f001 f85a 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4881      	ldr	r0, [pc, #516]	; (8000464 <display7SEG+0x318>)
 800025e:	f001 f855 	bl	800130c <HAL_GPIO_WritePin>
				  break;
 8000262:	e0fb      	b.n	800045c <display7SEG+0x310>
			case 3:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487e      	ldr	r0, [pc, #504]	; (8000464 <display7SEG+0x318>)
 800026a:	f001 f84f 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487c      	ldr	r0, [pc, #496]	; (8000464 <display7SEG+0x318>)
 8000274:	f001 f84a 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	4879      	ldr	r0, [pc, #484]	; (8000464 <display7SEG+0x318>)
 800027e:	f001 f845 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4877      	ldr	r0, [pc, #476]	; (8000464 <display7SEG+0x318>)
 8000288:	f001 f840 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4874      	ldr	r0, [pc, #464]	; (8000464 <display7SEG+0x318>)
 8000292:	f001 f83b 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4872      	ldr	r0, [pc, #456]	; (8000464 <display7SEG+0x318>)
 800029c:	f001 f836 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	486f      	ldr	r0, [pc, #444]	; (8000464 <display7SEG+0x318>)
 80002a6:	f001 f831 	bl	800130c <HAL_GPIO_WritePin>
				  break;
 80002aa:	e0d7      	b.n	800045c <display7SEG+0x310>
			case 4:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486c      	ldr	r0, [pc, #432]	; (8000464 <display7SEG+0x318>)
 80002b2:	f001 f82b 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486a      	ldr	r0, [pc, #424]	; (8000464 <display7SEG+0x318>)
 80002bc:	f001 f826 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4867      	ldr	r0, [pc, #412]	; (8000464 <display7SEG+0x318>)
 80002c6:	f001 f821 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4865      	ldr	r0, [pc, #404]	; (8000464 <display7SEG+0x318>)
 80002d0:	f001 f81c 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4862      	ldr	r0, [pc, #392]	; (8000464 <display7SEG+0x318>)
 80002da:	f001 f817 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4860      	ldr	r0, [pc, #384]	; (8000464 <display7SEG+0x318>)
 80002e4:	f001 f812 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	485d      	ldr	r0, [pc, #372]	; (8000464 <display7SEG+0x318>)
 80002ee:	f001 f80d 	bl	800130c <HAL_GPIO_WritePin>
				  break;
 80002f2:	e0b3      	b.n	800045c <display7SEG+0x310>
			case 5:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485a      	ldr	r0, [pc, #360]	; (8000464 <display7SEG+0x318>)
 80002fa:	f001 f807 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4858      	ldr	r0, [pc, #352]	; (8000464 <display7SEG+0x318>)
 8000304:	f001 f802 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4855      	ldr	r0, [pc, #340]	; (8000464 <display7SEG+0x318>)
 800030e:	f000 fffd 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4853      	ldr	r0, [pc, #332]	; (8000464 <display7SEG+0x318>)
 8000318:	f000 fff8 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4850      	ldr	r0, [pc, #320]	; (8000464 <display7SEG+0x318>)
 8000322:	f000 fff3 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484e      	ldr	r0, [pc, #312]	; (8000464 <display7SEG+0x318>)
 800032c:	f000 ffee 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	484b      	ldr	r0, [pc, #300]	; (8000464 <display7SEG+0x318>)
 8000336:	f000 ffe9 	bl	800130c <HAL_GPIO_WritePin>
				  break;
 800033a:	e08f      	b.n	800045c <display7SEG+0x310>
			case 6:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4848      	ldr	r0, [pc, #288]	; (8000464 <display7SEG+0x318>)
 8000342:	f000 ffe3 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4846      	ldr	r0, [pc, #280]	; (8000464 <display7SEG+0x318>)
 800034c:	f000 ffde 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4843      	ldr	r0, [pc, #268]	; (8000464 <display7SEG+0x318>)
 8000356:	f000 ffd9 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4841      	ldr	r0, [pc, #260]	; (8000464 <display7SEG+0x318>)
 8000360:	f000 ffd4 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483e      	ldr	r0, [pc, #248]	; (8000464 <display7SEG+0x318>)
 800036a:	f000 ffcf 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483c      	ldr	r0, [pc, #240]	; (8000464 <display7SEG+0x318>)
 8000374:	f000 ffca 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4839      	ldr	r0, [pc, #228]	; (8000464 <display7SEG+0x318>)
 800037e:	f000 ffc5 	bl	800130c <HAL_GPIO_WritePin>
				  break;
 8000382:	e06b      	b.n	800045c <display7SEG+0x310>
			case 7:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4836      	ldr	r0, [pc, #216]	; (8000464 <display7SEG+0x318>)
 800038a:	f000 ffbf 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4834      	ldr	r0, [pc, #208]	; (8000464 <display7SEG+0x318>)
 8000394:	f000 ffba 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4831      	ldr	r0, [pc, #196]	; (8000464 <display7SEG+0x318>)
 800039e:	f000 ffb5 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	482f      	ldr	r0, [pc, #188]	; (8000464 <display7SEG+0x318>)
 80003a8:	f000 ffb0 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482c      	ldr	r0, [pc, #176]	; (8000464 <display7SEG+0x318>)
 80003b2:	f000 ffab 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482a      	ldr	r0, [pc, #168]	; (8000464 <display7SEG+0x318>)
 80003bc:	f000 ffa6 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4827      	ldr	r0, [pc, #156]	; (8000464 <display7SEG+0x318>)
 80003c6:	f000 ffa1 	bl	800130c <HAL_GPIO_WritePin>
				  break;
 80003ca:	e047      	b.n	800045c <display7SEG+0x310>
			case 8:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4824      	ldr	r0, [pc, #144]	; (8000464 <display7SEG+0x318>)
 80003d2:	f000 ff9b 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4822      	ldr	r0, [pc, #136]	; (8000464 <display7SEG+0x318>)
 80003dc:	f000 ff96 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <display7SEG+0x318>)
 80003e6:	f000 ff91 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481d      	ldr	r0, [pc, #116]	; (8000464 <display7SEG+0x318>)
 80003f0:	f000 ff8c 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481a      	ldr	r0, [pc, #104]	; (8000464 <display7SEG+0x318>)
 80003fa:	f000 ff87 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4818      	ldr	r0, [pc, #96]	; (8000464 <display7SEG+0x318>)
 8000404:	f000 ff82 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <display7SEG+0x318>)
 800040e:	f000 ff7d 	bl	800130c <HAL_GPIO_WritePin>
				  break;
 8000412:	e023      	b.n	800045c <display7SEG+0x310>
			case 9:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4812      	ldr	r0, [pc, #72]	; (8000464 <display7SEG+0x318>)
 800041a:	f000 ff77 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4810      	ldr	r0, [pc, #64]	; (8000464 <display7SEG+0x318>)
 8000424:	f000 ff72 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <display7SEG+0x318>)
 800042e:	f000 ff6d 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <display7SEG+0x318>)
 8000438:	f000 ff68 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <display7SEG+0x318>)
 8000442:	f000 ff63 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <display7SEG+0x318>)
 800044c:	f000 ff5e 	bl	800130c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4803      	ldr	r0, [pc, #12]	; (8000464 <display7SEG+0x318>)
 8000456:	f000 ff59 	bl	800130c <HAL_GPIO_WritePin>
				  break;
 800045a:	bf00      	nop

	  }
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010c00 	.word	0x40010c00

08000468 <update7SEG.0>:
  setTimer(3, 100);
  setTimer(4, 1);
  const int MAX_LED = 4;
  int index_led = 0;
  int led_buffer [4] = {1 , 5 , 0 , 8};
  void update7SEG (int index) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	4662      	mov	r2, ip
 8000472:	f8c7 c000 	str.w	ip, [r7]
	  display7SEG(led_buffer[index]);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	3302      	adds	r3, #2
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	4413      	add	r3, r2
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff fe63 	bl	800014c <display7SEG>
	  switch (index){
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2b03      	cmp	r3, #3
 800048a:	d867      	bhi.n	800055c <update7SEG.0+0xf4>
 800048c:	a201      	add	r2, pc, #4	; (adr r2, 8000494 <update7SEG.0+0x2c>)
 800048e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000492:	bf00      	nop
 8000494:	080004a5 	.word	0x080004a5
 8000498:	080004d3 	.word	0x080004d3
 800049c:	08000501 	.word	0x08000501
 80004a0:	0800052f 	.word	0x0800052f
	  case 0:
		  HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2140      	movs	r1, #64	; 0x40
 80004a8:	482f      	ldr	r0, [pc, #188]	; (8000568 <update7SEG.0+0x100>)
 80004aa:	f000 ff2f 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN1_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	482d      	ldr	r0, [pc, #180]	; (8000568 <update7SEG.0+0x100>)
 80004b4:	f000 ff2a 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN2_Pin, SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004be:	482a      	ldr	r0, [pc, #168]	; (8000568 <update7SEG.0+0x100>)
 80004c0:	f000 ff24 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN3_Pin, SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ca:	4827      	ldr	r0, [pc, #156]	; (8000568 <update7SEG.0+0x100>)
 80004cc:	f000 ff1e 	bl	800130c <HAL_GPIO_WritePin>
		  break;
 80004d0:	e045      	b.n	800055e <update7SEG.0+0xf6>
	  case 1:
		  HAL_GPIO_WritePin(GPIOA, EN0_Pin, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2140      	movs	r1, #64	; 0x40
 80004d6:	4824      	ldr	r0, [pc, #144]	; (8000568 <update7SEG.0+0x100>)
 80004d8:	f000 ff18 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	4821      	ldr	r0, [pc, #132]	; (8000568 <update7SEG.0+0x100>)
 80004e2:	f000 ff13 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN2_Pin, SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ec:	481e      	ldr	r0, [pc, #120]	; (8000568 <update7SEG.0+0x100>)
 80004ee:	f000 ff0d 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN3_Pin, SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f8:	481b      	ldr	r0, [pc, #108]	; (8000568 <update7SEG.0+0x100>)
 80004fa:	f000 ff07 	bl	800130c <HAL_GPIO_WritePin>
		  break;
 80004fe:	e02e      	b.n	800055e <update7SEG.0+0xf6>
	  case 2:
		  HAL_GPIO_WritePin(GPIOA, EN0_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	4818      	ldr	r0, [pc, #96]	; (8000568 <update7SEG.0+0x100>)
 8000506:	f000 ff01 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN1_Pin, SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	4816      	ldr	r0, [pc, #88]	; (8000568 <update7SEG.0+0x100>)
 8000510:	f000 fefc 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051a:	4813      	ldr	r0, [pc, #76]	; (8000568 <update7SEG.0+0x100>)
 800051c:	f000 fef6 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN3_Pin, SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000526:	4810      	ldr	r0, [pc, #64]	; (8000568 <update7SEG.0+0x100>)
 8000528:	f000 fef0 	bl	800130c <HAL_GPIO_WritePin>
		  break;
 800052c:	e017      	b.n	800055e <update7SEG.0+0xf6>
	  case 3:
		  HAL_GPIO_WritePin(GPIOA, EN0_Pin, SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	480d      	ldr	r0, [pc, #52]	; (8000568 <update7SEG.0+0x100>)
 8000534:	f000 feea 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN1_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	480a      	ldr	r0, [pc, #40]	; (8000568 <update7SEG.0+0x100>)
 800053e:	f000 fee5 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN2_Pin, SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	4807      	ldr	r0, [pc, #28]	; (8000568 <update7SEG.0+0x100>)
 800054a:	f000 fedf 	bl	800130c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <update7SEG.0+0x100>)
 8000556:	f000 fed9 	bl	800130c <HAL_GPIO_WritePin>
		  break;
 800055a:	e000      	b.n	800055e <update7SEG.0+0xf6>
	  default:
		  break;
 800055c:	bf00      	nop
	  }
  };
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40010800 	.word	0x40010800

0800056c <main>:
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b091      	sub	sp, #68	; 0x44
 8000570:	af00      	add	r7, sp, #0
int main(void)
 8000572:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Init();
 8000578:	f000 fbdc 	bl	8000d34 <HAL_Init>
  SystemClock_Config();
 800057c:	f000 f9f6 	bl	800096c <SystemClock_Config>
  MX_GPIO_Init();
 8000580:	f000 fa7c 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000584:	f000 fa2e 	bl	80009e4 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000588:	4855      	ldr	r0, [pc, #340]	; (80006e0 <main+0x174>)
 800058a:	f001 fb1f 	bl	8001bcc <HAL_TIM_Base_Start_IT>
  setTimer(0,100);
 800058e:	2164      	movs	r1, #100	; 0x64
 8000590:	2000      	movs	r0, #0
 8000592:	f000 faeb 	bl	8000b6c <setTimer>
  setTimer(1, 25);
 8000596:	2119      	movs	r1, #25
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fae7 	bl	8000b6c <setTimer>
  setTimer(2, 100);
 800059e:	2164      	movs	r1, #100	; 0x64
 80005a0:	2002      	movs	r0, #2
 80005a2:	f000 fae3 	bl	8000b6c <setTimer>
  setTimer(3, 100);
 80005a6:	2164      	movs	r1, #100	; 0x64
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 fadf 	bl	8000b6c <setTimer>
  setTimer(4, 1);
 80005ae:	2101      	movs	r1, #1
 80005b0:	2004      	movs	r0, #4
 80005b2:	f000 fadb 	bl	8000b6c <setTimer>
  const int MAX_LED = 4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int index_led = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  int led_buffer [4] = {1 , 5 , 0 , 8};
 80005be:	4b49      	ldr	r3, [pc, #292]	; (80006e4 <main+0x178>)
 80005c0:	f107 040c 	add.w	r4, r7, #12
 80005c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int hour = 15, minute = 8, second = 50;
 80005ca:	230f      	movs	r3, #15
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	2308      	movs	r3, #8
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	2332      	movs	r3, #50	; 0x32
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
		  if((code >> 6) & 0x01)
			  HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
		  if((code >> 7) & 0x01)
			  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, RESET);
      }
      int initCol = 3;
 80005d6:	2303      	movs	r3, #3
 80005d8:	637b      	str	r3, [r7, #52]	; 0x34
      const int MAX_LED_MATRIX = 8;
 80005da:	2308      	movs	r3, #8
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
      int index_led_matrix = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
      int currentState = 3;
 80005e2:	2303      	movs	r3, #3
 80005e4:	633b      	str	r3, [r7, #48]	; 0x30
      uint8_t matrix_buffer[8] = {0x00, 0x3E, 0x48, 0x88, 0X88, 0x48, 0x3E, 0x00};
 80005e6:	4a40      	ldr	r2, [pc, #256]	; (80006e8 <main+0x17c>)
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f0:	e883 0003 	stmia.w	r3, {r0, r1}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(timerFlag[0] == 1){
 80005f4:	4b3d      	ldr	r3, [pc, #244]	; (80006ec <main+0x180>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d107      	bne.n	800060c <main+0xa0>
		HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
 80005fc:	2120      	movs	r1, #32
 80005fe:	483c      	ldr	r0, [pc, #240]	; (80006f0 <main+0x184>)
 8000600:	f000 fe9c 	bl	800133c <HAL_GPIO_TogglePin>
		setTimer(0, 100);
 8000604:	2164      	movs	r1, #100	; 0x64
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fab0 	bl	8000b6c <setTimer>
	}
	if(timerFlag[1] == 1){
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <main+0x180>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d110      	bne.n	8000636 <main+0xca>
		update7SEG(index_led++);
 8000614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	63fa      	str	r2, [r7, #60]	; 0x3c
 800061a:	463a      	mov	r2, r7
 800061c:	4694      	mov	ip, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff22 	bl	8000468 <update7SEG.0>
		if(index_led > 3) index_led = 0;
 8000624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000626:	2b03      	cmp	r3, #3
 8000628:	dd01      	ble.n	800062e <main+0xc2>
 800062a:	2300      	movs	r3, #0
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c
		setTimer(1, 25);
 800062e:	2119      	movs	r1, #25
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fa9b 	bl	8000b6c <setTimer>
	}
	if(timerFlag[2] == 1){
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <main+0x180>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d107      	bne.n	800064e <main+0xe2>
	  HAL_GPIO_TogglePin(GPIOA, DOT_Pin);
 800063e:	2110      	movs	r1, #16
 8000640:	482b      	ldr	r0, [pc, #172]	; (80006f0 <main+0x184>)
 8000642:	f000 fe7b 	bl	800133c <HAL_GPIO_TogglePin>
	  setTimer(2, 100);
 8000646:	2164      	movs	r1, #100	; 0x64
 8000648:	2002      	movs	r0, #2
 800064a:	f000 fa8f 	bl	8000b6c <setTimer>
	}
	if(timerFlag[3] == 1){
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <main+0x180>)
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d11f      	bne.n	8000696 <main+0x12a>
		second++;
 8000656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000658:	3301      	adds	r3, #1
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
		if(second >= 60){
 800065c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800065e:	2b3b      	cmp	r3, #59	; 0x3b
 8000660:	dd04      	ble.n	800066c <main+0x100>
		  second = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
		  minute++;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
		}
		if(minute >= 60){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b3b      	cmp	r3, #59	; 0x3b
 8000670:	dd04      	ble.n	800067c <main+0x110>
		  minute = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
		  hour++;
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	3301      	adds	r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
		}
		if(hour >= 24) hour = 0;
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b17      	cmp	r3, #23
 8000680:	dd01      	ble.n	8000686 <main+0x11a>
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
		updateClockBuffer();
 8000686:	463b      	mov	r3, r7
 8000688:	469c      	mov	ip, r3
 800068a:	f000 f833 	bl	80006f4 <updateClockBuffer.1>
		setTimer(3, 100);
 800068e:	2164      	movs	r1, #100	; 0x64
 8000690:	2003      	movs	r0, #3
 8000692:	f000 fa6b 	bl	8000b6c <setTimer>
	}
	  if(timerFlag[4] == 1){
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <main+0x180>)
 8000698:	691b      	ldr	r3, [r3, #16]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d1aa      	bne.n	80005f4 <main+0x88>
		  updateLEDMatrix(currentState++);
 800069e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	633a      	str	r2, [r7, #48]	; 0x30
 80006a4:	463a      	mov	r2, r7
 80006a6:	4694      	mov	ip, r2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f8f3 	bl	8000894 <updateLEDMatrix.2>
		  index_led_matrix++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
		  if(index_led_matrix >= MAX_LED_MATRIX){
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b8:	429a      	cmp	r2, r3
 80006ba:	db0c      	blt.n	80006d6 <main+0x16a>
			  initCol = (initCol - 1);
 80006bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006be:	3b01      	subs	r3, #1
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
			  if(initCol == -8 ) initCol = 7;
 80006c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c4:	f113 0f08 	cmn.w	r3, #8
 80006c8:	d101      	bne.n	80006ce <main+0x162>
 80006ca:	2307      	movs	r3, #7
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
			  currentState = initCol;
 80006ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d0:	633b      	str	r3, [r7, #48]	; 0x30
			  index_led_matrix = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]

		  }
		  setTimer(4, 1);
 80006d6:	2101      	movs	r1, #1
 80006d8:	2004      	movs	r0, #4
 80006da:	f000 fa47 	bl	8000b6c <setTimer>
	if(timerFlag[0] == 1){
 80006de:	e789      	b.n	80005f4 <main+0x88>
 80006e0:	20000028 	.word	0x20000028
 80006e4:	0800236c 	.word	0x0800236c
 80006e8:	0800237c 	.word	0x0800237c
 80006ec:	20000098 	.word	0x20000098
 80006f0:	40010800 	.word	0x40010800

080006f4 <updateClockBuffer.1>:
	void updateClockBuffer(){
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4663      	mov	r3, ip
 80006fc:	f8c7 c004 	str.w	ip, [r7, #4]
		led_buffer[0] = hour / 10;
 8000700:	689a      	ldr	r2, [r3, #8]
 8000702:	4917      	ldr	r1, [pc, #92]	; (8000760 <updateClockBuffer.1+0x6c>)
 8000704:	fb81 0102 	smull	r0, r1, r1, r2
 8000708:	1089      	asrs	r1, r1, #2
 800070a:	17d2      	asrs	r2, r2, #31
 800070c:	1a8a      	subs	r2, r1, r2
 800070e:	60da      	str	r2, [r3, #12]
		led_buffer[1] = hour % 10;
 8000710:	6898      	ldr	r0, [r3, #8]
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <updateClockBuffer.1+0x6c>)
 8000714:	fb82 1200 	smull	r1, r2, r2, r0
 8000718:	1091      	asrs	r1, r2, #2
 800071a:	17c2      	asrs	r2, r0, #31
 800071c:	1a89      	subs	r1, r1, r2
 800071e:	460a      	mov	r2, r1
 8000720:	0092      	lsls	r2, r2, #2
 8000722:	440a      	add	r2, r1
 8000724:	0052      	lsls	r2, r2, #1
 8000726:	1a81      	subs	r1, r0, r2
 8000728:	6119      	str	r1, [r3, #16]
		led_buffer[2] = minute / 10;
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <updateClockBuffer.1+0x6c>)
 800072e:	fb81 0102 	smull	r0, r1, r1, r2
 8000732:	1089      	asrs	r1, r1, #2
 8000734:	17d2      	asrs	r2, r2, #31
 8000736:	1a8a      	subs	r2, r1, r2
 8000738:	615a      	str	r2, [r3, #20]
		led_buffer[3] = minute % 10;
 800073a:	6858      	ldr	r0, [r3, #4]
 800073c:	4a08      	ldr	r2, [pc, #32]	; (8000760 <updateClockBuffer.1+0x6c>)
 800073e:	fb82 1200 	smull	r1, r2, r2, r0
 8000742:	1091      	asrs	r1, r2, #2
 8000744:	17c2      	asrs	r2, r0, #31
 8000746:	1a89      	subs	r1, r1, r2
 8000748:	460a      	mov	r2, r1
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	440a      	add	r2, r1
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	1a81      	subs	r1, r0, r2
 8000752:	6199      	str	r1, [r3, #24]
	}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	66666667 	.word	0x66666667

08000764 <clearCols.3>:
	void clearCols(){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	f8c7 c004 	str.w	ip, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin|ENM6_Pin|ENM7_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f64f 410c 	movw	r1, #64524	; 0xfc0c
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <clearCols.3+0x20>)
 8000776:	f000 fdc9 	bl	800130c <HAL_GPIO_WritePin>
      }
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40010800 	.word	0x40010800

08000788 <clearRows.4>:
      void clearRows(){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	f8c7 c004 	str.w	ip, [r7, #4]
    	  HAL_GPIO_WritePin(GPIOB, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <clearRows.4+0x20>)
 800079a:	f000 fdb7 	bl	800130c <HAL_GPIO_WritePin>
      }
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40010c00 	.word	0x40010c00

080007ac <setRow.5>:
      void setRow(uint8_t code){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
 80007b6:	f8c7 c000 	str.w	ip, [r7]
    	  if((code >> 0) & 0x01)
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d005      	beq.n	80007d0 <setRow.5+0x24>
    		  HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ca:	4831      	ldr	r0, [pc, #196]	; (8000890 <setRow.5+0xe4>)
 80007cc:	f000 fd9e 	bl	800130c <HAL_GPIO_WritePin>
    	  if((code >> 1) & 0x01)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	085b      	lsrs	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d005      	beq.n	80007ea <setRow.5+0x3e>
    		  HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e4:	482a      	ldr	r0, [pc, #168]	; (8000890 <setRow.5+0xe4>)
 80007e6:	f000 fd91 	bl	800130c <HAL_GPIO_WritePin>
    	  if((code >> 2) & 0x01)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	089b      	lsrs	r3, r3, #2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d005      	beq.n	8000804 <setRow.5+0x58>
    		  HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fe:	4824      	ldr	r0, [pc, #144]	; (8000890 <setRow.5+0xe4>)
 8000800:	f000 fd84 	bl	800130c <HAL_GPIO_WritePin>
    	  if((code >> 3) & 0x01)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	2b00      	cmp	r3, #0
 8000810:	d005      	beq.n	800081e <setRow.5+0x72>
    		  HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000818:	481d      	ldr	r0, [pc, #116]	; (8000890 <setRow.5+0xe4>)
 800081a:	f000 fd77 	bl	800130c <HAL_GPIO_WritePin>
    	  if((code >> 4) & 0x01)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	091b      	lsrs	r3, r3, #4
 8000822:	b2db      	uxtb	r3, r3
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d005      	beq.n	8000838 <setRow.5+0x8c>
    		  HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000832:	4817      	ldr	r0, [pc, #92]	; (8000890 <setRow.5+0xe4>)
 8000834:	f000 fd6a 	bl	800130c <HAL_GPIO_WritePin>
		  if((code >> 5) & 0x01)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	095b      	lsrs	r3, r3, #5
 800083c:	b2db      	uxtb	r3, r3
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	2b00      	cmp	r3, #0
 8000844:	d005      	beq.n	8000852 <setRow.5+0xa6>
			  HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084c:	4810      	ldr	r0, [pc, #64]	; (8000890 <setRow.5+0xe4>)
 800084e:	f000 fd5d 	bl	800130c <HAL_GPIO_WritePin>
		  if((code >> 6) & 0x01)
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	099b      	lsrs	r3, r3, #6
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d005      	beq.n	800086c <setRow.5+0xc0>
			  HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000866:	480a      	ldr	r0, [pc, #40]	; (8000890 <setRow.5+0xe4>)
 8000868:	f000 fd50 	bl	800130c <HAL_GPIO_WritePin>
		  if((code >> 7) & 0x01)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	09db      	lsrs	r3, r3, #7
 8000870:	b2db      	uxtb	r3, r3
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	2b00      	cmp	r3, #0
 8000878:	d005      	beq.n	8000886 <setRow.5+0xda>
			  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000880:	4803      	ldr	r0, [pc, #12]	; (8000890 <setRow.5+0xe4>)
 8000882:	f000 fd43 	bl	800130c <HAL_GPIO_WritePin>
      }
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40010c00 	.word	0x40010c00

08000894 <updateLEDMatrix.2>:
      void updateLEDMatrix(int state){
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	4664      	mov	r4, ip
 800089e:	f8c7 c000 	str.w	ip, [r7]
    	  if(state < 0) return;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db5a      	blt.n	800095e <updateLEDMatrix.2+0xca>
    	  	clearCols();
 80008a8:	46a4      	mov	ip, r4
 80008aa:	f7ff ff5b 	bl	8000764 <clearCols.3>
      		clearRows();
 80008ae:	46a4      	mov	ip, r4
 80008b0:	f7ff ff6a 	bl	8000788 <clearRows.4>
      	switch(state){
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b07      	cmp	r3, #7
 80008b8:	d848      	bhi.n	800094c <updateLEDMatrix.2+0xb8>
 80008ba:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <updateLEDMatrix.2+0x2c>)
 80008bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c0:	080008e1 	.word	0x080008e1
 80008c4:	080008ed 	.word	0x080008ed
 80008c8:	080008f9 	.word	0x080008f9
 80008cc:	08000907 	.word	0x08000907
 80008d0:	08000915 	.word	0x08000915
 80008d4:	08000923 	.word	0x08000923
 80008d8:	08000931 	.word	0x08000931
 80008dc:	0800093f 	.word	0x0800093f
      			HAL_GPIO_WritePin(GPIOA, ENM0_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2104      	movs	r1, #4
 80008e4:	4820      	ldr	r0, [pc, #128]	; (8000968 <updateLEDMatrix.2+0xd4>)
 80008e6:	f000 fd11 	bl	800130c <HAL_GPIO_WritePin>
      			break;
 80008ea:	e030      	b.n	800094e <updateLEDMatrix.2+0xba>
      			HAL_GPIO_WritePin(GPIOA, ENM1_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2108      	movs	r1, #8
 80008f0:	481d      	ldr	r0, [pc, #116]	; (8000968 <updateLEDMatrix.2+0xd4>)
 80008f2:	f000 fd0b 	bl	800130c <HAL_GPIO_WritePin>
      			break;
 80008f6:	e02a      	b.n	800094e <updateLEDMatrix.2+0xba>
      			HAL_GPIO_WritePin(GPIOA, ENM2_Pin, RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fe:	481a      	ldr	r0, [pc, #104]	; (8000968 <updateLEDMatrix.2+0xd4>)
 8000900:	f000 fd04 	bl	800130c <HAL_GPIO_WritePin>
      			break;
 8000904:	e023      	b.n	800094e <updateLEDMatrix.2+0xba>
      			HAL_GPIO_WritePin(GPIOA, ENM3_Pin, RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090c:	4816      	ldr	r0, [pc, #88]	; (8000968 <updateLEDMatrix.2+0xd4>)
 800090e:	f000 fcfd 	bl	800130c <HAL_GPIO_WritePin>
      			break;
 8000912:	e01c      	b.n	800094e <updateLEDMatrix.2+0xba>
      			HAL_GPIO_WritePin(GPIOA, ENM4_Pin, RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091a:	4813      	ldr	r0, [pc, #76]	; (8000968 <updateLEDMatrix.2+0xd4>)
 800091c:	f000 fcf6 	bl	800130c <HAL_GPIO_WritePin>
      			break;
 8000920:	e015      	b.n	800094e <updateLEDMatrix.2+0xba>
      			HAL_GPIO_WritePin(GPIOA, ENM5_Pin, RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000928:	480f      	ldr	r0, [pc, #60]	; (8000968 <updateLEDMatrix.2+0xd4>)
 800092a:	f000 fcef 	bl	800130c <HAL_GPIO_WritePin>
      			break;
 800092e:	e00e      	b.n	800094e <updateLEDMatrix.2+0xba>
      			HAL_GPIO_WritePin(GPIOA, ENM6_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <updateLEDMatrix.2+0xd4>)
 8000938:	f000 fce8 	bl	800130c <HAL_GPIO_WritePin>
      			break;
 800093c:	e007      	b.n	800094e <updateLEDMatrix.2+0xba>
      			HAL_GPIO_WritePin(GPIOA, ENM7_Pin, RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000944:	4808      	ldr	r0, [pc, #32]	; (8000968 <updateLEDMatrix.2+0xd4>)
 8000946:	f000 fce1 	bl	800130c <HAL_GPIO_WritePin>
      			break;
 800094a:	e000      	b.n	800094e <updateLEDMatrix.2+0xba>
      			break;
 800094c:	bf00      	nop
      	setRow(matrix_buffer[index_led_matrix]);
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	4423      	add	r3, r4
 8000952:	7f1b      	ldrb	r3, [r3, #28]
 8000954:	46a4      	mov	ip, r4
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ff28 	bl	80007ac <setRow.5>
 800095c:	e000      	b.n	8000960 <updateLEDMatrix.2+0xcc>
    	  if(state < 0) return;
 800095e:	bf00      	nop
      }
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bd90      	pop	{r4, r7, pc}
 8000966:	bf00      	nop
 8000968:	40010800 	.word	0x40010800

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b090      	sub	sp, #64	; 0x40
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0318 	add.w	r3, r7, #24
 8000976:	2228      	movs	r2, #40	; 0x28
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fcbe 	bl	80022fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000992:	2301      	movs	r3, #1
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000996:	2310      	movs	r3, #16
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800099a:	2300      	movs	r3, #0
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	f107 0318 	add.w	r3, r7, #24
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fce4 	bl	8001370 <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009ae:	f000 f8d8 	bl	8000b62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b2:	230f      	movs	r3, #15
 80009b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 ff52 	bl	8001874 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009d6:	f000 f8c4 	bl	8000b62 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3740      	adds	r7, #64	; 0x40
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a0a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a18:	220a      	movs	r2, #10
 8000a1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a2a:	f001 f87f 	bl	8001b2c <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a34:	f000 f895 	bl	8000b62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4619      	mov	r1, r3
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a46:	f001 fa15 	bl	8001e74 <HAL_TIM_ConfigClockSource>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a50:	f000 f887 	bl	8000b62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_TIM2_Init+0x94>)
 8000a62:	f001 fbe1 	bl	8002228 <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a6c:	f000 f879 	bl	8000b62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000028 	.word	0x20000028

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <MX_GPIO_Init+0xac>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a24      	ldr	r2, [pc, #144]	; (8000b28 <MX_GPIO_Init+0xac>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_GPIO_Init+0xac>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_GPIO_Init+0xac>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <MX_GPIO_Init+0xac>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_GPIO_Init+0xac>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|EN0_Pin
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f64f 71dc 	movw	r1, #65500	; 0xffdc
 8000ac6:	4819      	ldr	r0, [pc, #100]	; (8000b2c <MX_GPIO_Init+0xb0>)
 8000ac8:	f000 fc20 	bl	800130c <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|ENM2_Pin
                          |ENM3_Pin|ENM4_Pin|ENM5_Pin|ENM6_Pin
                          |ENM7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2120      	movs	r1, #32
 8000ad0:	4816      	ldr	r0, [pc, #88]	; (8000b2c <MX_GPIO_Init+0xb0>)
 8000ad2:	f000 fc1b 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8000adc:	4814      	ldr	r0, [pc, #80]	; (8000b30 <MX_GPIO_Init+0xb4>)
 8000ade:	f000 fc15 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000ae2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000ae6:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2302      	movs	r3, #2
 8000af2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_GPIO_Init+0xb0>)
 8000afc:	f000 fa8a 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8000b00:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000b04:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_GPIO_Init+0xb4>)
 8000b1a:	f000 fa7b 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	timerRun(0);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 f82d 	bl	8000b9c <timerRun>
	timerRun(1);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f000 f82a 	bl	8000b9c <timerRun>
	timerRun(2);
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f000 f827 	bl	8000b9c <timerRun>
	timerRun(3);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 f824 	bl	8000b9c <timerRun>
	timerRun(4);
 8000b54:	2004      	movs	r0, #4
 8000b56:	f000 f821 	bl	8000b9c <timerRun>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b66:	b672      	cpsid	i
}
 8000b68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <Error_Handler+0x8>

08000b6c <setTimer>:
#include "software_timer.h"

int timerCounter[10] = {0};
int timerFlag[10] = {0};

void setTimer(int timer_ID, int duration){
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
	timerCounter[timer_ID] = duration;
 8000b76:	4907      	ldr	r1, [pc, #28]	; (8000b94 <setTimer+0x28>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timerFlag[timer_ID] = 0;
 8000b80:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <setTimer+0x2c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2100      	movs	r1, #0
 8000b86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	20000070 	.word	0x20000070
 8000b98:	20000098 	.word	0x20000098

08000b9c <timerRun>:
void timerRun(int timer_ID){
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	if(timerCounter[timer_ID] > 0){
 8000ba4:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <timerRun+0x48>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	dd13      	ble.n	8000bd8 <timerRun+0x3c>
		timerCounter[timer_ID]--;
 8000bb0:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <timerRun+0x48>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	490a      	ldr	r1, [pc, #40]	; (8000be4 <timerRun+0x48>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timerCounter[timer_ID] <= 0){
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <timerRun+0x48>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	dc04      	bgt.n	8000bd8 <timerRun+0x3c>
			timerFlag[timer_ID] = 1;
 8000bce:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <timerRun+0x4c>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000070 	.word	0x20000070
 8000be8:	20000098 	.word	0x20000098

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_MspInit+0x40>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_MspInit+0x40>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_MspInit+0x40>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_MspInit+0x40>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_MspInit+0x40>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_MspInit+0x40>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c40:	d113      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	61d3      	str	r3, [r2, #28]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	201c      	movs	r0, #28
 8000c60:	f000 f9a1 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c64:	201c      	movs	r0, #28
 8000c66:	f000 f9ba 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbe:	f000 f87f 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM2_IRQHandler+0x10>)
 8000cce:	f000 ffc9 	bl	8001c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000028 	.word	0x20000028

08000cdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce8:	f7ff fff8 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cee:	490c      	ldr	r1, [pc, #48]	; (8000d20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d04:	4c09      	ldr	r4, [pc, #36]	; (8000d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f001 fafb 	bl	800230c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d16:	f7ff fc29 	bl	800056c <main>
  bx lr
 8000d1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d24:	080023b0 	.word	0x080023b0
  ldr r2, =_sbss
 8000d28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d2c:	200000c4 	.word	0x200000c4

08000d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_2_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x28>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x28>)
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f923 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff ff4c 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40022000 	.word	0x40022000

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f93b 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f903 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x20>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_IncTick+0x20>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	200000c0 	.word	0x200000c0

08000de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <HAL_GetTick+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	200000c0 	.word	0x200000c0

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4906      	ldr	r1, [pc, #24]	; (8000e90 <__NVIC_EnableIRQ+0x34>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff90 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff2d 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff42 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff90 	bl	8000ee8 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5f 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff35 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b08b      	sub	sp, #44	; 0x2c
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e161      	b.n	80012ec <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001028:	2201      	movs	r2, #1
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	429a      	cmp	r2, r3
 8001042:	f040 8150 	bne.w	80012e6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4a97      	ldr	r2, [pc, #604]	; (80012a8 <HAL_GPIO_Init+0x294>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d05e      	beq.n	800110e <HAL_GPIO_Init+0xfa>
 8001050:	4a95      	ldr	r2, [pc, #596]	; (80012a8 <HAL_GPIO_Init+0x294>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d875      	bhi.n	8001142 <HAL_GPIO_Init+0x12e>
 8001056:	4a95      	ldr	r2, [pc, #596]	; (80012ac <HAL_GPIO_Init+0x298>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d058      	beq.n	800110e <HAL_GPIO_Init+0xfa>
 800105c:	4a93      	ldr	r2, [pc, #588]	; (80012ac <HAL_GPIO_Init+0x298>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d86f      	bhi.n	8001142 <HAL_GPIO_Init+0x12e>
 8001062:	4a93      	ldr	r2, [pc, #588]	; (80012b0 <HAL_GPIO_Init+0x29c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d052      	beq.n	800110e <HAL_GPIO_Init+0xfa>
 8001068:	4a91      	ldr	r2, [pc, #580]	; (80012b0 <HAL_GPIO_Init+0x29c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d869      	bhi.n	8001142 <HAL_GPIO_Init+0x12e>
 800106e:	4a91      	ldr	r2, [pc, #580]	; (80012b4 <HAL_GPIO_Init+0x2a0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d04c      	beq.n	800110e <HAL_GPIO_Init+0xfa>
 8001074:	4a8f      	ldr	r2, [pc, #572]	; (80012b4 <HAL_GPIO_Init+0x2a0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d863      	bhi.n	8001142 <HAL_GPIO_Init+0x12e>
 800107a:	4a8f      	ldr	r2, [pc, #572]	; (80012b8 <HAL_GPIO_Init+0x2a4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d046      	beq.n	800110e <HAL_GPIO_Init+0xfa>
 8001080:	4a8d      	ldr	r2, [pc, #564]	; (80012b8 <HAL_GPIO_Init+0x2a4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d85d      	bhi.n	8001142 <HAL_GPIO_Init+0x12e>
 8001086:	2b12      	cmp	r3, #18
 8001088:	d82a      	bhi.n	80010e0 <HAL_GPIO_Init+0xcc>
 800108a:	2b12      	cmp	r3, #18
 800108c:	d859      	bhi.n	8001142 <HAL_GPIO_Init+0x12e>
 800108e:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <HAL_GPIO_Init+0x80>)
 8001090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001094:	0800110f 	.word	0x0800110f
 8001098:	080010e9 	.word	0x080010e9
 800109c:	080010fb 	.word	0x080010fb
 80010a0:	0800113d 	.word	0x0800113d
 80010a4:	08001143 	.word	0x08001143
 80010a8:	08001143 	.word	0x08001143
 80010ac:	08001143 	.word	0x08001143
 80010b0:	08001143 	.word	0x08001143
 80010b4:	08001143 	.word	0x08001143
 80010b8:	08001143 	.word	0x08001143
 80010bc:	08001143 	.word	0x08001143
 80010c0:	08001143 	.word	0x08001143
 80010c4:	08001143 	.word	0x08001143
 80010c8:	08001143 	.word	0x08001143
 80010cc:	08001143 	.word	0x08001143
 80010d0:	08001143 	.word	0x08001143
 80010d4:	08001143 	.word	0x08001143
 80010d8:	080010f1 	.word	0x080010f1
 80010dc:	08001105 	.word	0x08001105
 80010e0:	4a76      	ldr	r2, [pc, #472]	; (80012bc <HAL_GPIO_Init+0x2a8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010e6:	e02c      	b.n	8001142 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	623b      	str	r3, [r7, #32]
          break;
 80010ee:	e029      	b.n	8001144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	3304      	adds	r3, #4
 80010f6:	623b      	str	r3, [r7, #32]
          break;
 80010f8:	e024      	b.n	8001144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	3308      	adds	r3, #8
 8001100:	623b      	str	r3, [r7, #32]
          break;
 8001102:	e01f      	b.n	8001144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	330c      	adds	r3, #12
 800110a:	623b      	str	r3, [r7, #32]
          break;
 800110c:	e01a      	b.n	8001144 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001116:	2304      	movs	r3, #4
 8001118:	623b      	str	r3, [r7, #32]
          break;
 800111a:	e013      	b.n	8001144 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d105      	bne.n	8001130 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001124:	2308      	movs	r3, #8
 8001126:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	611a      	str	r2, [r3, #16]
          break;
 800112e:	e009      	b.n	8001144 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001130:	2308      	movs	r3, #8
 8001132:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	615a      	str	r2, [r3, #20]
          break;
 800113a:	e003      	b.n	8001144 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
          break;
 8001140:	e000      	b.n	8001144 <HAL_GPIO_Init+0x130>
          break;
 8001142:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	2bff      	cmp	r3, #255	; 0xff
 8001148:	d801      	bhi.n	800114e <HAL_GPIO_Init+0x13a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	e001      	b.n	8001152 <HAL_GPIO_Init+0x13e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3304      	adds	r3, #4
 8001152:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2bff      	cmp	r3, #255	; 0xff
 8001158:	d802      	bhi.n	8001160 <HAL_GPIO_Init+0x14c>
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x152>
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	3b08      	subs	r3, #8
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	210f      	movs	r1, #15
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	401a      	ands	r2, r3
 8001178:	6a39      	ldr	r1, [r7, #32]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	431a      	orrs	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 80a9 	beq.w	80012e6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001194:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <HAL_GPIO_Init+0x2ac>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a49      	ldr	r2, [pc, #292]	; (80012c0 <HAL_GPIO_Init+0x2ac>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_GPIO_Init+0x2ac>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011ac:	4a45      	ldr	r2, [pc, #276]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <HAL_GPIO_Init+0x2b4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00d      	beq.n	80011f4 <HAL_GPIO_Init+0x1e0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a3c      	ldr	r2, [pc, #240]	; (80012cc <HAL_GPIO_Init+0x2b8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x1dc>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a3b      	ldr	r2, [pc, #236]	; (80012d0 <HAL_GPIO_Init+0x2bc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d101      	bne.n	80011ec <HAL_GPIO_Init+0x1d8>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e004      	b.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011ec:	2303      	movs	r3, #3
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011f4:	2300      	movs	r3, #0
 80011f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4093      	lsls	r3, r2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001206:	492f      	ldr	r1, [pc, #188]	; (80012c4 <HAL_GPIO_Init+0x2b0>)
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001220:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	492b      	ldr	r1, [pc, #172]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	608b      	str	r3, [r1, #8]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	4927      	ldr	r1, [pc, #156]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 8001238:	4013      	ands	r3, r2
 800123a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	4921      	ldr	r1, [pc, #132]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	60cb      	str	r3, [r1, #12]
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	43db      	mvns	r3, r3
 800125e:	491d      	ldr	r1, [pc, #116]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 8001260:	4013      	ands	r3, r2
 8001262:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4917      	ldr	r1, [pc, #92]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	43db      	mvns	r3, r3
 8001286:	4913      	ldr	r1, [pc, #76]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 8001288:	4013      	ands	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d01f      	beq.n	80012d8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	490d      	ldr	r1, [pc, #52]	; (80012d4 <HAL_GPIO_Init+0x2c0>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e01f      	b.n	80012e6 <HAL_GPIO_Init+0x2d2>
 80012a6:	bf00      	nop
 80012a8:	10320000 	.word	0x10320000
 80012ac:	10310000 	.word	0x10310000
 80012b0:	10220000 	.word	0x10220000
 80012b4:	10210000 	.word	0x10210000
 80012b8:	10120000 	.word	0x10120000
 80012bc:	10110000 	.word	0x10110000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	40010800 	.word	0x40010800
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	40011000 	.word	0x40011000
 80012d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_GPIO_Init+0x2f4>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	43db      	mvns	r3, r3
 80012e0:	4909      	ldr	r1, [pc, #36]	; (8001308 <HAL_GPIO_Init+0x2f4>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	3301      	adds	r3, #1
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	fa22 f303 	lsr.w	r3, r2, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f47f ae96 	bne.w	8001028 <HAL_GPIO_Init+0x14>
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	372c      	adds	r7, #44	; 0x2c
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	611a      	str	r2, [r3, #16]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4013      	ands	r3, r2
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43d9      	mvns	r1, r3
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	400b      	ands	r3, r1
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	611a      	str	r2, [r3, #16]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
	...

08001370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e272      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8087 	beq.w	800149e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001390:	4b92      	ldr	r3, [pc, #584]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b04      	cmp	r3, #4
 800139a:	d00c      	beq.n	80013b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800139c:	4b8f      	ldr	r3, [pc, #572]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d112      	bne.n	80013ce <HAL_RCC_OscConfig+0x5e>
 80013a8:	4b8c      	ldr	r3, [pc, #560]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d10b      	bne.n	80013ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b6:	4b89      	ldr	r3, [pc, #548]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d06c      	beq.n	800149c <HAL_RCC_OscConfig+0x12c>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d168      	bne.n	800149c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e24c      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x76>
 80013d8:	4b80      	ldr	r3, [pc, #512]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a7f      	ldr	r2, [pc, #508]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e02e      	b.n	8001444 <HAL_RCC_OscConfig+0xd4>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x98>
 80013ee:	4b7b      	ldr	r3, [pc, #492]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a7a      	ldr	r2, [pc, #488]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b78      	ldr	r3, [pc, #480]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a77      	ldr	r2, [pc, #476]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e01d      	b.n	8001444 <HAL_RCC_OscConfig+0xd4>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0xbc>
 8001412:	4b72      	ldr	r3, [pc, #456]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a71      	ldr	r2, [pc, #452]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b6f      	ldr	r3, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a6e      	ldr	r2, [pc, #440]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0xd4>
 800142c:	4b6b      	ldr	r3, [pc, #428]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a6a      	ldr	r2, [pc, #424]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b68      	ldr	r3, [pc, #416]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a67      	ldr	r2, [pc, #412]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001442:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d013      	beq.n	8001474 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fcca 	bl	8000de4 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fcc6 	bl	8000de4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e200      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0xe4>
 8001472:	e014      	b.n	800149e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fcb6 	bl	8000de4 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fcb2 	bl	8000de4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e1ec      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x10c>
 800149a:	e000      	b.n	800149e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d063      	beq.n	8001572 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014aa:	4b4c      	ldr	r3, [pc, #304]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00b      	beq.n	80014ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014b6:	4b49      	ldr	r3, [pc, #292]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d11c      	bne.n	80014fc <HAL_RCC_OscConfig+0x18c>
 80014c2:	4b46      	ldr	r3, [pc, #280]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d116      	bne.n	80014fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ce:	4b43      	ldr	r3, [pc, #268]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <HAL_RCC_OscConfig+0x176>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e1c0      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4939      	ldr	r1, [pc, #228]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	e03a      	b.n	8001572 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d020      	beq.n	8001546 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001504:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <HAL_RCC_OscConfig+0x270>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fc6b 	bl	8000de4 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001512:	f7ff fc67 	bl	8000de4 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e1a1      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4927      	ldr	r1, [pc, #156]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
 8001544:	e015      	b.n	8001572 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_RCC_OscConfig+0x270>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fc4a 	bl	8000de4 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001554:	f7ff fc46 	bl	8000de4 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e180      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d03a      	beq.n	80015f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d019      	beq.n	80015ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_RCC_OscConfig+0x274>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fc2a 	bl	8000de4 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001594:	f7ff fc26 	bl	8000de4 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e160      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f000 fa9c 	bl	8001af0 <RCC_Delay>
 80015b8:	e01c      	b.n	80015f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_RCC_OscConfig+0x274>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7ff fc10 	bl	8000de4 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c6:	e00f      	b.n	80015e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c8:	f7ff fc0c 	bl	8000de4 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d908      	bls.n	80015e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e146      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	42420000 	.word	0x42420000
 80015e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b92      	ldr	r3, [pc, #584]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1e9      	bne.n	80015c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a6 	beq.w	800174e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b8b      	ldr	r3, [pc, #556]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10d      	bne.n	800162e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a87      	ldr	r2, [pc, #540]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b85      	ldr	r3, [pc, #532]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b82      	ldr	r3, [pc, #520]	; (8001838 <HAL_RCC_OscConfig+0x4c8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163a:	4b7f      	ldr	r3, [pc, #508]	; (8001838 <HAL_RCC_OscConfig+0x4c8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7e      	ldr	r2, [pc, #504]	; (8001838 <HAL_RCC_OscConfig+0x4c8>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001646:	f7ff fbcd 	bl	8000de4 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164e:	f7ff fbc9 	bl	8000de4 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b64      	cmp	r3, #100	; 0x64
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e103      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	4b75      	ldr	r3, [pc, #468]	; (8001838 <HAL_RCC_OscConfig+0x4c8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x312>
 8001674:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a6e      	ldr	r2, [pc, #440]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	e02d      	b.n	80016de <HAL_RCC_OscConfig+0x36e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x334>
 800168a:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a69      	ldr	r2, [pc, #420]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	4b67      	ldr	r3, [pc, #412]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a66      	ldr	r2, [pc, #408]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	e01c      	b.n	80016de <HAL_RCC_OscConfig+0x36e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x356>
 80016ac:	4b61      	ldr	r3, [pc, #388]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4a60      	ldr	r2, [pc, #384]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4a5d      	ldr	r2, [pc, #372]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6213      	str	r3, [r2, #32]
 80016c4:	e00b      	b.n	80016de <HAL_RCC_OscConfig+0x36e>
 80016c6:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a5a      	ldr	r2, [pc, #360]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	4b58      	ldr	r3, [pc, #352]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4a57      	ldr	r2, [pc, #348]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d015      	beq.n	8001712 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fb7d 	bl	8000de4 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff fb79 	bl	8000de4 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e0b1      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0ee      	beq.n	80016ee <HAL_RCC_OscConfig+0x37e>
 8001710:	e014      	b.n	800173c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fb67 	bl	8000de4 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fb63 	bl	8000de4 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	; 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e09b      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	4b40      	ldr	r3, [pc, #256]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1ee      	bne.n	800171a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d105      	bne.n	800174e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001742:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a3b      	ldr	r2, [pc, #236]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800174c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 8087 	beq.w	8001866 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d061      	beq.n	8001828 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d146      	bne.n	80017fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <HAL_RCC_OscConfig+0x4cc>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fb37 	bl	8000de4 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fb33 	bl	8000de4 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e06d      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a0:	d108      	bne.n	80017b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	4921      	ldr	r1, [pc, #132]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a19      	ldr	r1, [r3, #32]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	430b      	orrs	r3, r1
 80017c6:	491b      	ldr	r1, [pc, #108]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_RCC_OscConfig+0x4cc>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fb07 	bl	8000de4 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff fb03 	bl	8000de4 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e03d      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x46a>
 80017f8:	e035      	b.n	8001866 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_RCC_OscConfig+0x4cc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff faf0 	bl	8000de4 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff faec 	bl	8000de4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e026      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x498>
 8001826:	e01e      	b.n	8001866 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e019      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
 8001834:	40021000 	.word	0x40021000
 8001838:	40007000 	.word	0x40007000
 800183c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_OscConfig+0x500>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	429a      	cmp	r2, r3
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d001      	beq.n	8001866 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0d0      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d910      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b67      	ldr	r3, [pc, #412]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 0207 	bic.w	r2, r3, #7
 800189e:	4965      	ldr	r1, [pc, #404]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0b8      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d0:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e8:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	494d      	ldr	r1, [pc, #308]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d040      	beq.n	8001994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d115      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e07f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e073      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e06b      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f023 0203 	bic.w	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4936      	ldr	r1, [pc, #216]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001964:	f7ff fa3e 	bl	8000de4 <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	e00a      	b.n	8001982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7ff fa3a 	bl	8000de4 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	; 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e053      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 020c 	and.w	r2, r3, #12
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	429a      	cmp	r2, r3
 8001992:	d1eb      	bne.n	800196c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d210      	bcs.n	80019c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 0207 	bic.w	r2, r3, #7
 80019aa:	4922      	ldr	r1, [pc, #136]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e032      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4916      	ldr	r1, [pc, #88]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	490e      	ldr	r1, [pc, #56]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a02:	f000 f821 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	490a      	ldr	r1, [pc, #40]	; (8001a3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	5ccb      	ldrb	r3, [r1, r3]
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_RCC_ClockConfig+0x1cc>)
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_ClockConfig+0x1d0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f99c 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	08002384 	.word	0x08002384
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x30>
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x36>
 8001a76:	e027      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a7a:	613b      	str	r3, [r7, #16]
      break;
 8001a7c:	e027      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a88:	5cd3      	ldrb	r3, [r2, r3]
 8001a8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d010      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	0c5b      	lsrs	r3, r3, #17
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aaa:	fb03 f202 	mul.w	r2, r3, r2
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e004      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	613b      	str	r3, [r7, #16]
      break;
 8001ac6:	e002      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aca:	613b      	str	r3, [r7, #16]
      break;
 8001acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ace:	693b      	ldr	r3, [r7, #16]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	007a1200 	.word	0x007a1200
 8001ae4:	08002394 	.word	0x08002394
 8001ae8:	080023a4 	.word	0x080023a4
 8001aec:	003d0900 	.word	0x003d0900

08001af0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <RCC_Delay+0x34>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <RCC_Delay+0x38>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0a5b      	lsrs	r3, r3, #9
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b0c:	bf00      	nop
  }
  while (Delay --);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1e5a      	subs	r2, r3, #1
 8001b12:	60fa      	str	r2, [r7, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f9      	bne.n	8001b0c <RCC_Delay+0x1c>
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	20000000 	.word	0x20000000
 8001b28:	10624dd3 	.word	0x10624dd3

08001b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e041      	b.n	8001bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff f86c 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3304      	adds	r3, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f000 fa6e 	bl	800204c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d001      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e035      	b.n	8001c50 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <HAL_TIM_Base_Start_IT+0x90>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d009      	beq.n	8001c1a <HAL_TIM_Base_Start_IT+0x4e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0e:	d004      	beq.n	8001c1a <HAL_TIM_Base_Start_IT+0x4e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_TIM_Base_Start_IT+0x94>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d111      	bne.n	8001c3e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b06      	cmp	r3, #6
 8001c2a:	d010      	beq.n	8001c4e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3c:	e007      	b.n	8001c4e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0201 	orr.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40000400 	.word	0x40000400

08001c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d122      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d11b      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0202 	mvn.w	r2, #2
 8001c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f9b4 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f9a7 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f9b6 	bl	8002026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0204 	mvn.w	r2, #4
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f98a 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f97d 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f98c 	bl	8002026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0208 	mvn.w	r2, #8
 8001d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f960 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f953 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f962 	bl	8002026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0210 	mvn.w	r2, #16
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2208      	movs	r2, #8
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f936 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f929 	bl	8002002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f938 	bl	8002026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0201 	mvn.w	r2, #1
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fea6 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	2b80      	cmp	r3, #128	; 0x80
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e00:	2b80      	cmp	r3, #128	; 0x80
 8001e02:	d107      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fa6b 	bl	80022ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2c:	2b40      	cmp	r3, #64	; 0x40
 8001e2e:	d107      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8fc 	bl	8002038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d107      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0220 	mvn.w	r2, #32
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fa36 	bl	80022d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_TIM_ConfigClockSource+0x1c>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e0b4      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0x186>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec8:	d03e      	beq.n	8001f48 <HAL_TIM_ConfigClockSource+0xd4>
 8001eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ece:	f200 8087 	bhi.w	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed6:	f000 8086 	beq.w	8001fe6 <HAL_TIM_ConfigClockSource+0x172>
 8001eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ede:	d87f      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ee0:	2b70      	cmp	r3, #112	; 0x70
 8001ee2:	d01a      	beq.n	8001f1a <HAL_TIM_ConfigClockSource+0xa6>
 8001ee4:	2b70      	cmp	r3, #112	; 0x70
 8001ee6:	d87b      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ee8:	2b60      	cmp	r3, #96	; 0x60
 8001eea:	d050      	beq.n	8001f8e <HAL_TIM_ConfigClockSource+0x11a>
 8001eec:	2b60      	cmp	r3, #96	; 0x60
 8001eee:	d877      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ef0:	2b50      	cmp	r3, #80	; 0x50
 8001ef2:	d03c      	beq.n	8001f6e <HAL_TIM_ConfigClockSource+0xfa>
 8001ef4:	2b50      	cmp	r3, #80	; 0x50
 8001ef6:	d873      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d058      	beq.n	8001fae <HAL_TIM_ConfigClockSource+0x13a>
 8001efc:	2b40      	cmp	r3, #64	; 0x40
 8001efe:	d86f      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001f00:	2b30      	cmp	r3, #48	; 0x30
 8001f02:	d064      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0x15a>
 8001f04:	2b30      	cmp	r3, #48	; 0x30
 8001f06:	d86b      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d060      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0x15a>
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d867      	bhi.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d05c      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0x15a>
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d05a      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0x15a>
 8001f18:	e062      	b.n	8001fe0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f2a:	f000 f95e 	bl	80021ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	609a      	str	r2, [r3, #8]
      break;
 8001f46:	e04f      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f58:	f000 f947 	bl	80021ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f6a:	609a      	str	r2, [r3, #8]
      break;
 8001f6c:	e03c      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f000 f8be 	bl	80020fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2150      	movs	r1, #80	; 0x50
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f915 	bl	80021b6 <TIM_ITRx_SetConfig>
      break;
 8001f8c:	e02c      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f000 f8dc 	bl	8002158 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2160      	movs	r1, #96	; 0x60
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f905 	bl	80021b6 <TIM_ITRx_SetConfig>
      break;
 8001fac:	e01c      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f000 f89e 	bl	80020fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2140      	movs	r1, #64	; 0x40
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f8f5 	bl	80021b6 <TIM_ITRx_SetConfig>
      break;
 8001fcc:	e00c      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4610      	mov	r0, r2
 8001fda:	f000 f8ec 	bl	80021b6 <TIM_ITRx_SetConfig>
      break;
 8001fde:	e003      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe4:	e000      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
	...

0800204c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <TIM_Base_SetConfig+0xa8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d007      	beq.n	8002074 <TIM_Base_SetConfig+0x28>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206a:	d003      	beq.n	8002074 <TIM_Base_SetConfig+0x28>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <TIM_Base_SetConfig+0xac>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d108      	bne.n	8002086 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <TIM_Base_SetConfig+0xa8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0x52>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0x52>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <TIM_Base_SetConfig+0xac>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <TIM_Base_SetConfig+0xa8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d103      	bne.n	80020e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	615a      	str	r2, [r3, #20]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40012c00 	.word	0x40012c00
 80020f8:	40000400 	.word	0x40000400

080020fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	f023 0201 	bic.w	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f023 030a 	bic.w	r3, r3, #10
 8002138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	621a      	str	r2, [r3, #32]
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	f023 0210 	bic.w	r2, r3, #16
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	031b      	lsls	r3, r3, #12
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002194:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	621a      	str	r2, [r3, #32]
}
 80021ac:	bf00      	nop
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f043 0307 	orr.w	r3, r3, #7
 80021d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	609a      	str	r2, [r3, #8]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b087      	sub	sp, #28
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002204:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	021a      	lsls	r2, r3, #8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	431a      	orrs	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4313      	orrs	r3, r2
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	609a      	str	r2, [r3, #8]
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800223c:	2302      	movs	r3, #2
 800223e:	e041      	b.n	80022c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d009      	beq.n	8002298 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228c:	d004      	beq.n	8002298 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d10c      	bne.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800229e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	40000400 	.word	0x40000400

080022d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <memset>:
 80022fc:	4603      	mov	r3, r0
 80022fe:	4402      	add	r2, r0
 8002300:	4293      	cmp	r3, r2
 8002302:	d100      	bne.n	8002306 <memset+0xa>
 8002304:	4770      	bx	lr
 8002306:	f803 1b01 	strb.w	r1, [r3], #1
 800230a:	e7f9      	b.n	8002300 <memset+0x4>

0800230c <__libc_init_array>:
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	2600      	movs	r6, #0
 8002310:	4d0c      	ldr	r5, [pc, #48]	; (8002344 <__libc_init_array+0x38>)
 8002312:	4c0d      	ldr	r4, [pc, #52]	; (8002348 <__libc_init_array+0x3c>)
 8002314:	1b64      	subs	r4, r4, r5
 8002316:	10a4      	asrs	r4, r4, #2
 8002318:	42a6      	cmp	r6, r4
 800231a:	d109      	bne.n	8002330 <__libc_init_array+0x24>
 800231c:	f000 f81a 	bl	8002354 <_init>
 8002320:	2600      	movs	r6, #0
 8002322:	4d0a      	ldr	r5, [pc, #40]	; (800234c <__libc_init_array+0x40>)
 8002324:	4c0a      	ldr	r4, [pc, #40]	; (8002350 <__libc_init_array+0x44>)
 8002326:	1b64      	subs	r4, r4, r5
 8002328:	10a4      	asrs	r4, r4, #2
 800232a:	42a6      	cmp	r6, r4
 800232c:	d105      	bne.n	800233a <__libc_init_array+0x2e>
 800232e:	bd70      	pop	{r4, r5, r6, pc}
 8002330:	f855 3b04 	ldr.w	r3, [r5], #4
 8002334:	4798      	blx	r3
 8002336:	3601      	adds	r6, #1
 8002338:	e7ee      	b.n	8002318 <__libc_init_array+0xc>
 800233a:	f855 3b04 	ldr.w	r3, [r5], #4
 800233e:	4798      	blx	r3
 8002340:	3601      	adds	r6, #1
 8002342:	e7f2      	b.n	800232a <__libc_init_array+0x1e>
 8002344:	080023a8 	.word	0x080023a8
 8002348:	080023a8 	.word	0x080023a8
 800234c:	080023a8 	.word	0x080023a8
 8002350:	080023ac 	.word	0x080023ac

08002354 <_init>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	bf00      	nop
 8002358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235a:	bc08      	pop	{r3}
 800235c:	469e      	mov	lr, r3
 800235e:	4770      	bx	lr

08002360 <_fini>:
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002362:	bf00      	nop
 8002364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002366:	bc08      	pop	{r3}
 8002368:	469e      	mov	lr, r3
 800236a:	4770      	bx	lr
